# This is a sample environment variable file that can be used
# to preconfigure the Jenkins instance. There are a lot of Optional
# variables that can be exported to preconfigure certain Jenkins
# settings. The optional vars are commented out. To use: create a
# copy of this file and rename it to ".jenkins.env" and place it
# in the same directory as the docker-compose.yml file

export JAVA_OPTS=-Djenkins.install.runSetupWizard=false

# Number of executor to use
export JENKINS_MASTER_EXECUTORS=0
export JENKINS_AGENT_EXECUTORS=5

# Master Vars #########################################################
# The initial admin users's password, should be changed after initial login
export LOCAL_ADMIN=<username here example: admin>
export LOCAL_PASSWORD=<password here>

# Path inside the container where the secrets file can be bind mounted
export JENKINS_SECRETS=/var/jenkins_secrets 

# Your Jenkins Endpoint URL
export JENKINS_FRONTEND_URL=http://localhost:8080

# Optional Master Vars ------------------------------------------------

# Preload A GitHub server and Org
# If you want to have GitHub automatically configured:
#export GITHUB_SETUP_API_URL=https://api.github.com
#export GITHUB_SETUP_CREDENTIAL_ID=github-personal-access-token
#export GITHUB_SETUP_WEBHOOK_CREDENTIAL_ID=github-personal-access-token-text #needs to be secret text
#export GITHUB_SETUP_ORG_NAME=my-github-org
#export GITHUB_SETUP_ORG_DISPLAY_NAME=MyGitHubOrg

# If you have a different public webhook enpoint that differs from your
# JENKINS_FRONTEND_URL. Needs to be accessible to your GitHub server
#export GIHUB_SETUP_ORG_WEBHOOK_URL=https://www.example.com/github-webhook/

# For the above GitHub setup to work, you will need to create two credentials
# Both are personal access tokens generated from this page:
# https://<github-url>/settings/tokens
# Token scopes should be: repo, admin:repo_hook

# There are two options to seed the credentials.
# 1) Bind mount The secrets in at $JENKINS_SECRETS/<secrets_file>
# 2) Use the SECRETS_SEED_URL to point to an http or file endpoint to download at runtime

# The file should be a base64 encoded key/value pair of credentials, For example:
# secrets_file:
# format: <type [up|text]>:<unique_id>:<username(type=up)|password(type=text)>[:<password>]
# ----------------------------------------------
# up:github-personal-access-token:username:token
# text:github-personal-access-token-text:token
# ----------------------------------------------
# base64 encoded: dXA6Z2l0aHViLXBlcnNvbmFsLWFjY2Vzcy10b2tlbjp1c2VybmFtZTpwYXNzd29yZAp0ZXh0OmdpdGh1Yi1wZXJzb25hbC1hY2Nlc3MtdG9rZW4tdGV4dDpwYXNzd29yZAo=

#export SECRETS_SEED_URL=https://www.example.com/secrets-file

# Build Agent Vars ####################################################
# used to have build agent join
export JOIN_SECRET=<secret taken from agent screen>

# If you are running the agent on
#export JENKINS_SERVER=jenkins-master
#######################################################################


# If you are behind a proxy
#export http_proxy=http://proxy.example.com:8000
#export https_proxy=http://proxy.example.com:8000